# interface.py

import streamlit as st
from modelo import ConstrutorModelo
from dados import TratamentoDados
from variaveis import colunas_utilizadas, variavel_alvo
from analise import AnaliseDados
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px

st.set_page_config(page_title="Previs√£o de Inadimpl√™ncia", layout="wide")

menu = st.sidebar.selectbox("Navega√ß√£o", ["An√°lise Explorat√≥ria (EDA)", "Avalia√ß√£o do Modelo", "Sobre o Projeto"])

dados = TratamentoDados("bruto.csv")
df_original = dados.carregarDados()
df_limpo = dados.limparDados()
df = dados.preprocessarDados()

map_sex = {1: "Homem", 2: "Mulher"}
map_education = {
    1: "P√≥s-gradua√ß√£o",
    2: "Universidade",
    3: "Ensino M√©dio",
    4: "Outros",
    5: "Desconhecido",
    6: "Desconhecido"
}
map_marriage = {1: "Casado(a)", 2: "Solteiro(a)", 3: "Outro"}

df_original_plot = df_original.copy()
df_original_plot['sexo'] = df_original_plot['sexo'].map(map_sex)
df_original_plot['educa√ß√£o'] = df_original_plot['educa√ß√£o'].map(map_education)
df_original_plot['estado civil'] = df_original_plot['estado civil'].map(map_marriage)

modelo = ConstrutorModelo(df, colunas_utilizadas, alvo=variavel_alvo)

if menu == "An√°lise Explorat√≥ria (EDA)":
    st.title("An√°lise Explorat√≥ria de Dados")
    analise = AnaliseDados(df_original)

    st.subheader("Estat√≠sticas Descritivas")
    st.dataframe(analise.estatisticas_descritivas())

    st.subheader("Histogramas")
    for coluna in colunas_utilizadas:
        fig = px.histogram(df_original_plot, x=coluna, nbins=50, title=f"Distribui√ß√£o de {coluna}")
        st.plotly_chart(fig, use_container_width=True)

    st.subheader("Boxplot Interativo")
    coluna = st.selectbox("Escolha uma vari√°vel:", colunas_utilizadas)
    fig_box = px.box(df_original_plot, y=coluna, title=f"Boxplot de {coluna}")
    st.plotly_chart(fig_box, use_container_width=True)

    st.subheader("Matriz de Correla√ß√£o (Interativa)")
    corr = df_original[colunas_utilizadas].corr()
    fig_corr = px.imshow(corr, text_auto=True, color_continuous_scale='RdBu', title="Matriz de Correla√ß√£o")
    st.plotly_chart(fig_corr, use_container_width=True)

elif menu == "Avalia√ß√£o do Modelo":
    st.sidebar.header("Selecione o Algoritmo")
    tipo_modelo = st.sidebar.selectbox("Modelo", ["XGBoost", "Random Forest"])
    st.sidebar.header("Par√¢metros do Modelo")

    if tipo_modelo == "XGBoost":
        max_depth = st.sidebar.slider("Profundidade da √Årvore", 1, 10, 4)
        learning_rate = st.sidebar.slider("Taxa de Aprendizado", 0.01, 0.5, 0.1, step=0.01)
        num_rounds = st.sidebar.slider("N¬∫ de Itera√ß√µes", 10, 500, 100, step=10)
        threshold = st.sidebar.slider("Limiar para Classifica√ß√£o", 0.0, 1.0, 0.6, step=0.01)
    else:
        n_estimators = st.sidebar.slider("N¬∫ de √Årvores", 10, 500, 100, step=10)
        max_depth = st.sidebar.slider("Profundidade M√°xima", 1, 20, 10)
        threshold = st.sidebar.slider("Limiar para Classifica√ß√£o", 0.0, 1.0, 0.6, step=0.01)

    modelo = ConstrutorModelo(df, colunas_utilizadas, alvo=variavel_alvo, tipo_modelo=tipo_modelo)

    if tipo_modelo == "XGBoost":
        modelo.configurar_parametros(max_depth, learning_rate, num_rounds, threshold)
    else:
        modelo.configurar_parametros_rf(n_estimators, max_depth, threshold)

    modelo.dividir_dados()
    modelo.treinar_modelo()

    st.title("Avalia√ß√£o do Modelo de Inadimpl√™ncia")
    st.subheader("Desempenho com Dados de Teste")
    metricas = modelo.avaliacao_geral()

    col1, col2 = st.columns(2)
    with col1:
        st.metric("Acur√°cia", f"{metricas['acuracia'] * 100:.2f}%")
        st.markdown("**Relat√≥rio de Classifica√ß√£o:**")
        st.json(metricas['relatorio'])

    with col2:
        st.markdown("**Matriz de Confus√£o:**")
        fig, ax = plt.subplots()
        sns.heatmap(metricas['matriz_confusao'], annot=True, fmt="d", cmap="Blues", cbar=False, ax=ax)
        st.pyplot(fig)


elif menu == "Sobre o Projeto":
    st.title("Sobre o Projeto")
    st.markdown("""
    ## üéØ Objetivo
    Este projeto visa prever o risco de inadimpl√™ncia de clientes utilizando dados financeiros e comportamentais. A ferramenta foi desenvolvida com interface interativa em Streamlit, permitindo ajuste de modelos e par√¢metros em tempo real.

    ## üîç An√°lise Explorat√≥ria (EDA)
    - A maioria dos clientes possui limite de cr√©dito entre R$ 50.000 e R$ 200.000.
    - Inadimpl√™ncia √© mais comum entre clientes com menos de 30 anos.
    - Solteiros(as) representam maior propor√ß√£o de inadimplentes.
    - Clientes com menor escolaridade t√™m maiores taxas de inadimpl√™ncia.
    - Correla√ß√£o significativa entre valores de faturas em meses consecutivos.

    ## ü§ñ Modelos Utilizados

    ### XGBoost (Padr√£o)
    - Acur√°cia: **80.86%**
    - Recall (inadimplentes): **50.97%**
    - Precision (inadimplentes): **56.16%**
    - F1-score (inadimplentes): **53.44%**

    ### Random Forest (Padr√£o)
    - Acur√°cia: **81.98%**
    - Recall (inadimplentes): **25.46%**
    - Precision (inadimplentes): **73.73%**
    - F1-score (inadimplentes): **37.85%**

    ## üìà Conclus√µes e Recomenda√ß√µes
    - O XGBoost apresenta melhor recall, importante para identificar inadimplentes.
    - Random Forest tem acur√°cia ligeiramente maior, mas menor sensibilidade para classe positiva.
    - A escolha do modelo depende do perfil de risco e da toler√¢ncia a falsos negativos.
    - Recomendamos uso com limiar ajust√°vel para adaptar a estrat√©gia da pol√≠tica de cr√©dito.
    """)

    with open("PREVIC.pdf", "rb") as file:
        st.download_button("Documenta√ß√£o PREVIC", data=file, file_name="PREVIC.pdf")
